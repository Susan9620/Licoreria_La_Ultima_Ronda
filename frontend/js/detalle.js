// Variables globales para el producto
let productoActual = null
let variantesProducto = []
let imagenesProducto = []

async function cargarDatosDeProductos(ids) {
  const resultados = []
  for (let id of ids) {
    try {
      const resp = await fetch(`${API_BASE}/api/productos/${id}`)
      if (!resp.ok) continue
      const json = await resp.json()
      if (json.√©xito && json.datos) {
        resultados.push(json.datos)
      }
    } catch (e) {
      console.warn(`No se pudo cargar producto ${id}:`, e)
    }
  }
  return resultados
}

// Obtener ID del producto desde la URL
function obtenerIdProductoDesdeURL() {
  const urlParams = new URLSearchParams(window.location.search)
  return urlParams.get("id")
}

// Cargar datos del producto desde la API
async function cargarDatosProducto() {
  const idProducto = obtenerIdProductoDesdeURL()

  if (!idProducto) {
    console.error("No se encontr√≥ ID de producto en la URL")
    window.location.href = "../html/productos.html"
    return
  }

  try {
    // Mostrar indicador de carga
    mostrarIndicadorCarga(true)

    // Obtener datos del producto
    const respuestaProducto = await fetch(`${API_BASE}/api/productos/${idProducto}`)
    if (!respuestaProducto.ok) {
      throw new Error("Producto no encontrado")
    }
    const datosProducto = await respuestaProducto.json()

    // Verificar la estructura de la respuesta
    if (datosProducto.√©xito && datosProducto.datos) {
      productoActual = datosProducto.datos
    } else if (datosProducto.datos) {
      productoActual = datosProducto.datos
    } else {
      throw new Error("Estructura de datos incorrecta")
    }

    console.log("Producto cargado:", productoActual)

    // Cargar variantes y im√°genes en paralelo
    await Promise.allSettled([
      cargarVariantesProducto(idProducto),
      cargarImagenesProducto(idProducto)
    ])

    // Renderizar el producto
    renderizarProducto()

    // Cargar productos relacionados
    cargarProductosRelacionados();

  } catch (error) {
    console.error("Error al cargar el producto:", error)
    mostrarError("Error al cargar el producto. Por favor, intente nuevamente.")
  } finally {
    mostrarIndicadorCarga(false)
  }
}

// Cargar variantes del producto
async function cargarVariantesProducto(idProducto) {
  try {
    const respuestaVariantes = await fetch(`${API_BASE}/api/variantes/producto/${idProducto}`)
    if (respuestaVariantes.ok) {
      const datosVariantes = await respuestaVariantes.json()
      if (datosVariantes.√©xito && datosVariantes.datos) {
        variantesProducto = datosVariantes.datos
      } else {
        variantesProducto = []
      }
      console.log("Variantes cargadas:", variantesProducto)
    }
  } catch (error) {
    console.warn("No se pudieron cargar las variantes:", error)
    variantesProducto = []
  }
}

// Cargar im√°genes del producto
async function cargarImagenesProducto(idProducto) {
  try {
    const respuestaImagenes = await fetch(`${API_BASE}/api/imagenes/producto/${idProducto}`)
    if (respuestaImagenes.ok) {
      const datosImagenes = await respuestaImagenes.json()
      if (datosImagenes.√©xito && datosImagenes.datos) {
        imagenesProducto = datosImagenes.datos
      } else {
        imagenesProducto = []
      }
      console.log("Im√°genes cargadas:", imagenesProducto)
    }
  } catch (error) {
    console.warn("No se pudieron cargar las im√°genes:", error)
    imagenesProducto = []
  }
}

// Renderizar los datos del producto en la p√°gina
function renderizarProducto() {
  console.log("üî• renderizarProducto ejecutado ‚Äî productoActual:", productoActual);
  if (!productoActual) return

  console.log("Renderizando producto:", productoActual)

  // Actualizar t√≠tulo de la p√°gina
  document.title = `${productoActual.Nombre} | Licores Artesanales`

  // Actualizar migas de pan
  actualizarMigasPan()

  // Actualizar informaci√≥n b√°sica
  const nombreProducto = document.querySelector(".Nombre_Producto")
  if (nombreProducto) nombreProducto.textContent = productoActual.Nombre

  const descripcion = document.querySelector(".Descripci√≥n_Breve")
  if (descripcion) {
    descripcion.textContent =
      productoActual.Descripci√≥n ||
      productoActual.Descripci√≥n_Corta ||
      "Sin descripci√≥n disponible"
  }

  // ‚îÄ‚îÄ Sincroniza el bot√≥n flotante y el panel de deseos con el producto actual ‚îÄ‚îÄ
  const btnFloat = document.querySelector('.Bot√≥n_Lista');
  if (btnFloat && window.Lista_Deseos) {
    // 1) Le damos el ID del producto 
    btnFloat.dataset.productoId = productoActual.ID_Producto;

    // 2) Actualizamos visual (contador y corazones activos) 
    Lista_Deseos.Actualizar_Contador();
    Lista_Deseos.Actualizar_UI();

    // 3) Aseguramos que los handlers de clics est√©n enganchados 
    Lista_Deseos.Configurar_Delegaci√≥n_Eventos();
  }

  const btnLista = document.querySelector('.Bot√≥n_Lista');
  if (btnLista && window.Lista_Deseos) {
    // 1) asignamos el ID al bot√≥n (√∫til si en un futuro lo necesitas)
    btnLista.dataset.productoId = productoActual.ID_Producto;

    // 2) al renderizar, comprobamos si ya est√° en deseos y marcamos
    const yaEnDeseos = Lista_Deseos.Art√≠culos.some(
      item => item.ID == productoActual.ID_Producto
    );
    btnLista.classList.toggle('Activo', yaEnDeseos);

    // 3) definimos el click para alternar favorito
    btnLista.onclick = async (e) => {
      e.preventDefault();
      e.stopPropagation();
      if (!localStorage.getItem('token')) {
        document.getElementById('Modal_Login')?.classList.add('show');
        return;
      }
      const a√±adido = await Lista_Deseos.Alternar_Favorito(
        productoActual.ID_Producto,
        productoActual.Nombre,
        document.querySelector('.Imagen_Principal img')?.src || '',
        (parseFloat(productoActual.Precio_Oferta || productoActual.Precio) || 0).toFixed(2)
      );
      // actualizamos el estado visual tras el post/delete
      btnLista.classList.toggle('Activo', a√±adido);
    };
  }

  const enlaceCat = document.querySelector('.Link_Categoria');
  if (enlaceCat && productoActual.Categor√≠a) {
    // mostrar texto
    enlaceCat.textContent = productoActual.Categor√≠a;
    // generar URL con query param 'filtro'
    enlaceCat.href = `/html/productos.html?filtro=${encodeURIComponent(productoActual.Categor√≠a)}`;
  }

  // Actualizar etiquetas
  actualizarEtiquetas()

  // Actualizar calificaci√≥n
  actualizarCalificacion()

  // Actualizar precio
  actualizarPrecio()

  // Actualizar im√°genes
  actualizarImagenes()

  // Actualizar zoom
  initZoom();

  // Actualizar variantes
  actualizarVariantes()

  // Actualizar pesta√±as de informaci√≥n
  actualizarPesta√±asInformacion()

  // Actualizar informaci√≥n adicional
  actualizarInformacionAdicional();

  // Inicializar el sistema de ‚Äúcalificaci√≥n de usuario‚Äù
  initCalificacionUsuario();

  ;[
    '.Galer√≠a_Producto',
    '.Informaci√≥n_Detallada',
    '.Pesta√±as_Informaci√≥n',
    '.Productos_Relacionados',
    '.Comprados_Juntos'
  ].forEach(sel => {
    const nodo = document.querySelector(sel)
    if (nodo) nodo.classList.add('Animado')
  })
}

async function initCalificacionUsuario() {
  const estrellas = document.querySelectorAll('.Estrella_Usuario');
  let valorSeleccionado = 0;

  // ‚ù∂ Si hay token, consulta si ya valor√≥
  const token = localStorage.getItem('token');
  if (token) {
    try {
      const resp = await fetch(`${API_BASE}/api/productos/${productoActual.ID_Producto}/calificacion`, {
        headers: { 'Authorization': 'Bearer ' + token }
      });
      const json = await resp.json();
      if (resp.ok && json.√©xito && json.datos !== null) {
        valorSeleccionado = json.datos;
        // muestra la calificaci√≥n previa
        estrellas.forEach(s => {
          const v = parseInt(s.dataset.valor, 10);
          s.classList.toggle('fas', v <= valorSeleccionado);
          s.classList.toggle('far', v > valorSeleccionado);
          // ‚ù∑ bloquea clics
          s.style.pointerEvents = 'none';
        });
        return; // ya no enganchamos los listeners
      }
    } catch (_) { /* ignora fallo y deja poder valorar */ }
  }

  // ‚ù∏ Si no valor√≥ antes, engancha comportamiento normal
  function resaltarHasta(valor) {
    estrellas.forEach(star => {
      const v = parseInt(star.dataset.valor, 10);
      star.classList.toggle('fas', v <= valor);
      star.classList.toggle('far', v > valor);
    });
  }

  estrellas.forEach(star => {
    const v = parseInt(star.dataset.valor, 10);
    star.addEventListener('mouseover', () => {
      if (valorSeleccionado === 0) resaltarHasta(v);
    });
    star.addEventListener('mouseout', () => {
      if (valorSeleccionado === 0) resaltarHasta(0);
    });
    star.addEventListener('click', async () => {
      if (valorSeleccionado > 0) return;
      valorSeleccionado = v;
      resaltarHasta(v);

      if (!token) {
        abrirModalLogin();
        return;
      }
      try {
        const resp = await fetch(`${API_BASE}/api/productos/${productoActual.ID_Producto}/calificar`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + token
          },
          body: JSON.stringify({ calificacion: v })
        });
        const json = await resp.json();
        if (!resp.ok || !json.√©xito) throw new Error(json.mensaje || 'Error');
        // actualizar media y total en UI
        productoActual.Calificaci√≥nMedia = json.datos.promedio;
        productoActual.TotalRese√±as = json.datos.total;
        actualizarCalificacion();
        // bloquear definitivamente
        estrellas.forEach(s => s.style.pointerEvents = 'none');
        Mostrar_Notificaci√≥n('¬°Gracias por su valoraci√≥n!', '√âxito');
      } catch (e) {
        console.error(e);
        Mostrar_Notificaci√≥n(e.message, 'Error');
      }
    });
  });
}

function initZoom() {
  const img = document.querySelector('.Imagen_Principal img');
  const btn = document.querySelector('.Bot√≥n_Zoom');
  if (!img || !btn) return;

  let zoomOn = false;
  let posX = 0, posY = 0;
  const scale = 1.5;

  // Asegura overflow en el contenedor
  const cont = img.parentElement;
  cont.classList.add('Zoom_Contenedor');

  // Alternar zoom al clicar el bot√≥n
  btn.addEventListener('click', () => {
    zoomOn = !zoomOn;
    if (zoomOn) {
      img.classList.add('En_Zoom');
      img.style.transform = `scale(${scale})`;
    } else {
      img.classList.remove('En_Zoom');
      img.style.transform = 'scale(1)';
      img.style.transformOrigin = 'center center';
      posX = posY = 0;
    }
  });

  // Mover origen de zoom con el rat√≥n
  img.addEventListener('mousemove', e => {
    if (!zoomOn) return;
    const R = img.getBoundingClientRect();
    const x = (e.clientX - R.left) / R.width;
    const y = (e.clientY - R.top) / R.height;
    img.style.transformOrigin = `${x * 100}% ${y * 100}%`;
  });

  // TOUCHSTART: guarda posici√≥n inicial
  let lastTouchX = 0, lastTouchY = 0;
  img.addEventListener('touchstart', e => {
    if (!zoomOn || e.touches.length !== 1) return;
    e.preventDefault();
    lastTouchX = e.touches[0].clientX;
    lastTouchY = e.touches[0].clientY;
  }, { passive: false });

  // TOUCHMOVE: arrastra la imagen
  img.addEventListener('touchmove', e => {
    if (!zoomOn || e.touches.length !== 1) return;
    e.preventDefault();
    const touch = e.touches[0];
    const deltaX = touch.clientX - lastTouchX;
    const deltaY = touch.clientY - lastTouchY;
    posX += deltaX / scale;
    posY += deltaY / scale;
    img.style.transform = `scale(${scale}) translate(${posX}px, ${posY}px)`;
    lastTouchX = touch.clientX;
    lastTouchY = touch.clientY;
  }, { passive: false });
}

// Actualizar migas de pan
function actualizarMigasPan() {
  if (!productoActual) return;

  // 1) Cambiar el nombre del producto (la parte final)
  const migasActual = document.querySelector(".Contenedor_Migas_Pan .Actual");
  if (migasActual) {
    migasActual.textContent = productoActual.Nombre;
  }

  // 2) Cambiar la categor√≠a din√°mica
  const linkCategoria = document.querySelector(".Contenedor_Migas_Pan .Link_Categoria");
  if (linkCategoria) {
    const cat = productoActual.Categor√≠a || "Productos";
    linkCategoria.textContent = cat;
    // Usar la ruta real donde sirves tu listado de productos:
    linkCategoria.href = `/html/productos.html?filtro=${encodeURIComponent(cat)}`;
  }
}

// Actualizar etiquetas del producto
function actualizarEtiquetas() {
  const contenedorEtiquetas = document.querySelector(".Etiquetas_Producto")
  if (!contenedorEtiquetas) return

  contenedorEtiquetas.innerHTML = ""

  if (productoActual.Etiqueta) {
    const etiqueta = document.createElement("span")
    etiqueta.className = `Etiqueta ${productoActual.Etiqueta}`
    etiqueta.textContent = productoActual.Etiqueta
    contenedorEtiquetas.appendChild(etiqueta)
  }

  // Agregar etiqueta de oferta si hay precio de oferta
  const precio = parseFloat(productoActual.Precio) || 0
  const precioOferta = parseFloat(productoActual.Precio_Oferta) || 0

  if (precioOferta > 0 && precioOferta < precio) {
    const descuento = Math.round(((precio - precioOferta) / precio) * 100)
    const etiquetaOferta = document.createElement("span")
    etiquetaOferta.className = "Etiqueta Oferta"
    etiquetaOferta.textContent = `-${descuento}%`
    contenedorEtiquetas.appendChild(etiquetaOferta)
  }
}

// Actualizar calificaci√≥n del producto
function actualizarCalificacion() {
  const calificacionProducto = document.querySelector(".Calificaci√≥n_Producto")
  if (!calificacionProducto) return

  const calificacion = parseFloat(productoActual.Calificaci√≥nMedia) || 0;
  const totalRese√±as = parseInt(productoActual.TotalRese√±as) || 0;

  // Actualizar estrellas
  const estrellas = calificacionProducto.querySelector(".Estrellas")
  if (estrellas) {
    estrellas.innerHTML = ""
    for (let i = 1; i <= 5; i++) {
      const estrella = document.createElement("i")
      if (i <= Math.floor(calificacion)) {
        estrella.className = "fas fa-star"
      } else if (i === Math.ceil(calificacion) && !Number.isInteger(calificacion)) {
        estrella.className = "fas fa-star-half-alt"
      } else {
        estrella.className = "far fa-star"
      }
      estrellas.appendChild(estrella)
    }
  }

  // Actualizar n√∫mero de rese√±as
  const numeroRese√±as = calificacionProducto.querySelector(".N√∫mero_Rese√±as")
  if (numeroRese√±as) {
    numeroRese√±as.textContent = `(${totalRese√±as} rese√±a${totalRese√±as !== 1 ? "s" : ""})`
  }
}

// Actualizar precio del producto
function actualizarPrecio() {
  const contenedorPrecio = document.querySelector(".Precio_Producto")
  if (!contenedorPrecio) return

  // Obtener precio de la variante predeterminada o del producto base
  let precio = 0
  let precioOferta = 0

  // Primero verificar si hay una variante predeterminada
  const variantePredeterminada = variantesProducto.find(v => v.Predeterminada) || variantesProducto[0]

  if (variantePredeterminada) {
    precio = parseFloat(variantePredeterminada.Precio) || 0
    precioOferta = parseFloat(variantePredeterminada.Precio_Oferta) || 0
  } else {
    precio = parseFloat(productoActual.Precio) || 0
    precioOferta = parseFloat(productoActual.Precio_Oferta) || 0
  }

  let html = ""

  if (precioOferta > 0 && precioOferta < precio) {
    const descuento = Math.round(((precio - precioOferta) / precio) * 100)
    html = `
      <span class="Precio_Actual">$${precioOferta.toFixed(2)}</span>
      <span class="Precio_Anterior">$${precio.toFixed(2)}</span>
      <span class="Descuento">Ahorra ${descuento}%</span>
    `
  } else {
    html = `<span class="Precio_Actual">$${precio.toFixed(2)}</span>`
  }

  contenedorPrecio.innerHTML = html
}

// Actualizar im√°genes del producto
function actualizarImagenes() {
  // 1. Aseg√∫rate de que exista el <img> principal
  const contenedorImagen = document.querySelector(".Imagen_Principal");
  let imgElement = contenedorImagen.querySelector("img");
  if (!imgElement) {
    imgElement = document.createElement("img");
    imgElement.alt = productoActual.Nombre;
    contenedorImagen.appendChild(imgElement);
  }

  // 2. Filtrar seg√∫n la variante seleccionada
  const varianteActual = obtenerVarianteActual();
  let imgs = [];
  if (varianteActual && varianteActual.ID_Variante_Producto) {
    imgs = imagenesProducto.filter(
      img => img.ID_Variante == varianteActual.ID_Variante_Producto
    );
  }
  // Si no hay im√°genes espec√≠ficas de esa variante, mostramos todas
  if (imgs.length === 0) {
    imgs = imagenesProducto;
  }

  // 3. Seleccionar la imagen principal (la marcada como Principal o la primera)
  const imagenPrincipalData =
    imgs.find(img => img.Principal === 1) ||
    imgs[0] ||
    { URL: "https://via.placeholder.com/500x500?text=Sin+Imagen" };

  imgElement.src = imagenPrincipalData.URL;
  imgElement.alt = imagenPrincipalData.Alt || productoActual.Nombre;

  // 4. Renderizar miniaturas
  const contenedorMiniaturas = document.querySelector(".Miniaturas_Producto");
  contenedorMiniaturas.innerHTML = "";
  imgs.slice(0, 4).forEach((imagen, index) => {
    const miniatura = document.createElement("div");
    miniatura.className = `Miniatura ${index === 0 ? "Activo" : ""}`;
    miniatura.innerHTML = `
      <img
        src="${imagen.URL}"
        alt="${imagen.Alt || productoActual.Nombre}"
      >
    `;
    contenedorMiniaturas.appendChild(miniatura);
  });
}

// Actualizar variantes del producto
function actualizarVariantes() {
  const contenedorOpciones = document.querySelector(".Selecci√≥n_Opciones")
  const tipoOpcion = document.querySelector(".Tipo_Opci√≥n")

  if (!contenedorOpciones) return

  contenedorOpciones.innerHTML = ""

  if (variantesProducto.length > 0) {
    // Mostrar la secci√≥n de opciones
    if (tipoOpcion) {
      tipoOpcion.style.display = "block"
    }

    variantesProducto.forEach((variante, index) => {
      const opcion = document.createElement("div")
      opcion.className = `Opci√≥n ${variante.Predeterminada || index === 0 ? "Seleccionado" : ""}`

      // Construir texto de la variante (prioriza Nombre_Variante; si no existe, usa Medida)
      let textoVariante = ""
      if (variante.Nombre_Variante) {
        textoVariante = variante.Nombre_Variante
      } else if (variante.Medida) {
        textoVariante = variante.Medida
      } else {
        textoVariante = `Variante ${index + 1}`
      }

      opcion.textContent = textoVariante
      opcion.setAttribute("data-variante-id", variante.ID_Variante_Producto)
      opcion.setAttribute("data-precio", variante.Precio || 0)
      opcion.setAttribute("data-precio-oferta", variante.Precio_Oferta || "")
      opcion.setAttribute("data-stock", variante.Stock || 0)

      contenedorOpciones.appendChild(opcion)
    })
  } else {
    // Ocultar la secci√≥n si no hay variantes
    if (tipoOpcion) {
      tipoOpcion.style.display = "none"
    }
  }
}

// Actualizar pesta√±as de informaci√≥n
function actualizarPesta√±asInformacion() {
  // Actualizar pesta√±a de caracter√≠sticas
  const caracteristicas = document.querySelector(".Pesta√±a_Contenido:first-child ul")
  if (caracteristicas) {
    let html = ""

    if (productoActual.Origen) {
      html += `<li><strong>Origen:</strong> ${productoActual.Origen}</li>`
    }

    if (productoActual.Graduaci√≥n) {
      html += `<li><strong>Contenido alcoh√≥lico:</strong> ${productoActual.Graduaci√≥n}% vol.</li>`
    }

    // Stock del producto o variante
    const stock = obtenerStockActual()
    if (stock !== null) {
      html += `<li><strong>En stock:</strong> ${stock} art√≠culos</li>`
    }

    // Informaci√≥n de la variante seleccionada o predeterminada
    const varianteActual = obtenerVarianteActual()
    if (varianteActual && varianteActual.Medida) {
      html += `<li><strong>Volumen:</strong> ${varianteActual.Medida}</li>`
    }

    if (varianteActual && varianteActual.Graduaci√≥n) {
      html += `<li><strong>Graduaci√≥n alcoh√≥lica:</strong> ${varianteActual.Graduaci√≥n}% vol.</li>`
    }

    if (varianteActual && varianteActual.SKU) {
      html += `<li><strong>SKU:</strong> ${varianteActual.SKU}</li>`
    }

    html += `<li><strong>Temperatura de servicio recomendada:</strong> 16-18¬∞C</li>`

    caracteristicas.innerHTML = html
  }

  // Actualizar pesta√±a "C√≥mo Disfrutarlo"
  const comoDisfrutarlo = document.querySelector(".Pesta√±a_Contenido:nth-child(2)");
  if (comoDisfrutarlo) {
    if (productoActual.C√≥mo_Disfrutarlo) {
      const texto = productoActual.C√≥mo_Disfrutarlo.trim();
      // Partimos en l√≠neas
      const p√°rrafos = texto
        .split("\n")
        .map(linea => {
          const t = linea.trim();
          if (!t) return ""; // saltos de l√≠nea en blanco
          // si NO termina en punto (.) ni en dos puntos (:), lo ponemos en negrita
          if (!/[.:]$/.test(t)) {
            return `<p><strong>${t}</strong></p>`;
          } else {
            return `<p>${t}</p>`;
          }
        })
        .join("");

      comoDisfrutarlo.innerHTML = `
      <h3>C√≥mo Disfrutar ${productoActual.Nombre}</h3>
      ${p√°rrafos}
    `;
    } else {
      comoDisfrutarlo.innerHTML = `
      <h3>C√≥mo Disfrutar ${productoActual.Nombre}</h3>
      <p>Informaci√≥n no disponible para este producto.</p>
    `;
    }
  }
}

// Obtener stock actual (del producto o variante seleccionada)
function obtenerStockActual() {
  const varianteSeleccionada = document.querySelector(".Opci√≥n.Seleccionado")
  if (varianteSeleccionada) {
    return parseInt(varianteSeleccionada.getAttribute("data-stock")) || 0
  }
  return parseInt(productoActual.Stock) || 0
}

// Obtener variante actual (seleccionada o predeterminada)
function obtenerVarianteActual() {
  const varianteSeleccionada = document.querySelector(".Opci√≥n.Seleccionado")
  if (varianteSeleccionada) {
    const varianteId = varianteSeleccionada.getAttribute("data-variante-id")
    return variantesProducto.find(v => v.ID_Variante_Producto == varianteId)
  }
  return variantesProducto.find(v => v.Predeterminada) || variantesProducto[0] || null
}

// Actualizar informaci√≥n adicional
function actualizarInformacionAdicional() {
  const informacionAdicional = document.querySelector(".Informaci√≥n_Adicional")
  if (!informacionAdicional) return

  const stock = obtenerStockActual()
  const enStock = stock > 0

  const elementos = informacionAdicional.querySelectorAll(".Elemento_Informaci√≥n")
  if (elementos.length > 0) {
    elementos[0].innerHTML = `
      <i class="fas ${enStock ? "fa-check-circle" : "fa-times-circle"}"></i>
      <span>${enStock ? `En stock - ${stock} disponibles` : "Agotado"}</span>
    `
  }
}

// Cargar productos relacionados
async function cargarProductosRelacionados() {
  try {
    const respuesta = await fetch('${API_BASE}/api/productos/all');
    if (!respuesta.ok) return;

    const datos = await respuesta.json();
    let todos = [];
    if (datos.√©xito && datos.datos) {
      todos = datos.datos;
    } else if (Array.isArray(datos.datos)) {
      todos = datos.datos;
    } else if (Array.isArray(datos)) {
      todos = datos;
    }

    // 1) Eliminamos el producto actual
    const otros = todos.filter(p => p.ID_Producto !== productoActual.ID_Producto);

    // 2) Intentamos primero emparejar por prefijo de slug
    const prefijo = productoActual.Slug.split("-")[0];
    let relacionados = otros.filter(p => p.Slug.startsWith(prefijo));

    // 3) Si hay menos de 4, rellenamos con productos de la misma categor√≠a (aleatorios)
    if (relacionados.length < 4) {
      const faltantesCategoria = otros
        .filter(p => p.Categor√≠a === productoActual.Categor√≠a && !relacionados.includes(p));

      // Mezclar faltantesCategoria
      for (let i = faltantesCategoria.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [faltantesCategoria[i], faltantesCategoria[j]] = [faltantesCategoria[j], faltantesCategoria[i]];
      }

      // Agregamos hasta completar 4
      const porAgregar = faltantesCategoria.slice(0, 4 - relacionados.length);
      relacionados = relacionados.concat(porAgregar);
    }

    // 4) Si a√∫n hay menos de 4, rellenamos con cualquier otro aleatorio
    if (relacionados.length < 4) {
      const restantes = otros.filter(p => !relacionados.includes(p));
      // Mezclar restantes
      for (let i = restantes.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [restantes[i], restantes[j]] = [restantes[j], restantes[i]];
      }
      const porAgregar2 = restantes.slice(0, 4 - relacionados.length);
      relacionados = relacionados.concat(porAgregar2);
    }

    // Finalmente, limitamos a 4
    relacionados = relacionados.slice(0, 4);

    renderizarProductosRelacionados(relacionados);
    cargarYRenderizarCompradosJuntos(productoActual.ID_Producto);
  } catch (error) {
    console.warn("Error al cargar productos relacionados:", error);
  }
}

// Renderizar productos relacionados
function renderizarProductosRelacionados(productos) {
  const contenedor = document.querySelector(".Carrusel_Relacionados")
  if (!contenedor || productos.length === 0) return

  contenedor.innerHTML = ""

  productos.forEach(producto => {
    const tarjeta = document.createElement("div")
    tarjeta.className = "Tarjeta_Producto"

    const precio = parseFloat(
      producto.Precio_Oferta && parseFloat(producto.Precio_Oferta) < parseFloat(producto.Precio)
        ? producto.Precio_Oferta
        : producto.Precio
    ) || 0

    const imagenUrl = producto.Imagen_URL || "https://via.placeholder.com/320x200?text=Sin+Imagen"

    tarjeta.innerHTML = `
      <div class="Imagen_Tarjeta">
        <img src="${imagenUrl}" alt="${producto.Nombre}">
      </div>
      <div class="Cuerpo_Tarjeta">
        <h3 class="T√≠tulo_Producto">${producto.Nombre}</h3>
        <div class="Informaci√≥n_Producto">
          <div class="Precio_Tarjeta">$${precio.toFixed(2)}</div>
          <div class="Estrellas_Tarjeta">
            ${generarEstrellas(producto.Calificaci√≥nMedia || 0)}
          </div>
        </div>
        <div class="Botones_Tarjeta">
          <button class="Botones Bot√≥n_Primario Bot√≥n_Tarjeta" onclick="window.location.href='detalle.html?id=${producto.ID_Producto}'">
            Ver Producto
          </button>
        </div>
      </div>
    `

    contenedor.appendChild(tarjeta)
  })
}

async function cargarYRenderizarCompradosJuntos(idProducto) {
  try {
    // 1) Traer los IDs de "comprados juntos"
    const resp = await fetch(`${API_BASE}/api/productos/${idProducto}/compradosjuntos`);
    if (!resp.ok) return;
    const json = await resp.json();
    if (!json.√©xito) return;
    const datos = json.datos; // [{ ID_Producto, VecesCompradoJunto }, ...]
    if (!Array.isArray(datos) || datos.length === 0) return;

    // 2) IDs y detalles de cada producto
    const ids = datos.map(item => item.ID_Producto);
    const productos = await cargarDatosDeProductos(ids);

    // 3) Traer variantes predeterminadas para cada producto
    const variantesMap = {};
    await Promise.all(productos.map(async p => {
      try {
        const r = await fetch(`${API_BASE}/api/variantes/producto/${p.ID_Producto}`);
        if (!r.ok) return;
        const j = await r.json();
        if (j.√©xito && Array.isArray(j.datos) && j.datos.length) {
          const pred = j.datos.find(v => v.Predeterminada) || j.datos[0];
          variantesMap[p.ID_Producto] = pred.Nombre_Variante || '';
        }
      } catch (__) { /* silencioso */ }
    }));

    // 4) Renderizar tarjetas en .Productos_Paquete
    const contenedorPaquete = document.querySelector(".Comprados_Juntos .Productos_Paquete");
    if (!contenedorPaquete) return;
    contenedorPaquete.innerHTML = "";

    productos.forEach((p, index) => {
      // 4.1) Separador "+"
      if (index > 0) {
        const sep = document.createElement("div");
        sep.className = "Separador_Paquete";
        sep.textContent = "+";
        contenedorPaquete.appendChild(sep);
      }

      // 4.2) Crear tarjeta
      const precioNum = parseFloat(
        p.Precio_Oferta && parseFloat(p.Precio_Oferta) < parseFloat(p.Precio)
          ? p.Precio_Oferta
          : p.Precio
      ) || 0;
      const imagenUrl = p.Imagen_URL || "https://via.placeholder.com/150x150?text=Sin+Imagen";

      const tarjeta = document.createElement("div");
      tarjeta.className = "Producto_Paquete";

      // INYECTAMOS AQU√ç LA VARIANTE en data-volumen
      tarjeta.dataset.volumen = variantesMap[p.ID_Producto] || "";

      tarjeta.innerHTML = `
        <div class="Imagen_Paquete">
          <img src="${imagenUrl}" alt="${p.Nombre}" />
        </div>
        <div class="Nombre_Paquete">${p.Nombre}</div>
        <div class="Precio_Paquete">$${precioNum.toFixed(2)}</div>
      `;
      contenedorPaquete.appendChild(tarjeta);
    });

    // 5) Calcular y mostrar total
    const total = productos.reduce((sum, p) => {
      const pr = parseFloat(
        p.Precio_Oferta && parseFloat(p.Precio_Oferta) < parseFloat(p.Precio)
          ? p.Precio_Oferta
          : p.Precio
      ) || 0;
      return sum + pr;
    }, 0);
    const precioTotalElem = document.querySelector(".Comprados_Juntos .Precio_Total");
    if (precioTotalElem) {
      precioTotalElem.textContent = `$${total.toFixed(2)}`;
    }

    // 6) Animaci√≥n de entrada
    const contenedor = document.querySelector(".Comprados_Juntos");
    if (contenedor) contenedor.classList.add("Animado");

    // -- FIN funci√≥n; el listener de "Agregar Todo" leer√° ahora dataset.volumen --
  } catch (error) {
    console.error("Error al cargar 'Comprados Juntos':", error);
  }
}

// Generar HTML de estrellas
function generarEstrellas(calificacion) {
  let html = ""
  const cal = parseFloat(calificacion) || 0
  for (let i = 1; i <= 5; i++) {
    if (i <= Math.floor(cal)) {
      html += '<i class="fas fa-star"></i>'
    } else if (i === Math.ceil(cal) && !Number.isInteger(cal)) {
      html += '<i class="fas fa-star-half-alt"></i>'
    } else {
      html += '<i class="far fa-star"></i>'
    }
  }
  return html
}

// Funci√≥n para actualizar precio seg√∫n variante
function actualizarPrecioVariante(precio, precioOferta, stock) {
  const contenedorPrecio = document.querySelector(".Precio_Producto")
  if (!contenedorPrecio) return

  let html = ""
  const precioNum = parseFloat(precio) || 0
  const precioOfertaNum = parseFloat(precioOferta) || 0

  if (precioOfertaNum > 0 && precioOfertaNum < precioNum) {
    const descuento = Math.round(((precioNum - precioOfertaNum) / precioNum) * 100)
    html = `
      <span class="Precio_Actual">$${precioOfertaNum.toFixed(2)}</span>
      <span class="Precio_Anterior">$${precioNum.toFixed(2)}</span>
      <span class="Descuento">Ahorra ${descuento}%</span>
    `
  } else {
    html = `<span class="Precio_Actual">$${precioNum.toFixed(2)}</span>`
  }

  contenedorPrecio.innerHTML = html

  // Actualizar informaci√≥n de stock
  const informacionAdicional = document.querySelector(".Informaci√≥n_Adicional")
  if (informacionAdicional) {
    const elementoStock = informacionAdicional.querySelector(".Elemento_Informaci√≥n:first-child")
    if (elementoStock) {
      const enStock = parseInt(stock) > 0
      elementoStock.innerHTML = `
        <i class="fas ${enStock ? "fa-check-circle" : "fa-times-circle"}"></i>
        <span>${enStock ? `En stock - ${stock} disponibles` : "Agotado"}</span>
      `
    }
  }

  // Actualizar pesta√±as con nueva informaci√≥n
  actualizarPesta√±asInformacion()
}

// Mostrar indicador de carga
function mostrarIndicadorCarga(mostrar) {
  let indicador = document.querySelector(".Indicador_Carga")

  if (mostrar && !indicador) {
    indicador = document.createElement("div")
    indicador.className = "Indicador_Carga"
    indicador.innerHTML = `
      <div class="Spinner"></div>
      <p>Cargando producto...</p>
    `
    indicador.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(255,255,255,0.9);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    `
    document.body.appendChild(indicador)
  } else if (!mostrar && indicador) {
    indicador.remove()
  }
}

// Mostrar mensaje de error
function mostrarError(mensaje) {
  const contenedorDetalle = document.querySelector(".Detalle_Producto")
  if (contenedorDetalle) {
    contenedorDetalle.innerHTML = `
      <div class="Error_Producto" style="text-align: center; padding: 50px;">
        <i class="fas fa-exclamation-triangle" style="font-size: 48px; color: #e74c3c; margin-bottom: 20px;"></i>
        <h2>Error al cargar el producto</h2>
        <p>${mensaje}</p>
        <button class="Botones Bot√≥n_Primario" onclick="window.location.href='../html/productos.html'">
          Volver a Productos
        </button>
      </div>
    `
  }
}

// Funci√≥n de notificaci√≥n
function mostrarNotificacion(mensaje, tipo) {
  if (typeof window.Mostrar_Notificaci√≥n === "function") {
    window.Mostrar_Notificaci√≥n(mensaje, tipo)
  } else {
    console.log(`${tipo}: ${mensaje}`)
  }
}

// Event listeners cuando el DOM est√© listo
document.addEventListener("DOMContentLoaded", () => {
  // Funcionalidad para selecci√≥n de variantes
  document.addEventListener("click", (e) => {
    if (e.target.classList.contains("Opci√≥n")) {
      // Remover selecci√≥n previa
      const hermanos = e.target.parentElement.querySelectorAll(".Opci√≥n")
      hermanos.forEach(elemento => elemento.classList.remove("Seleccionado"))

      // Agregar selecci√≥n actual
      e.target.classList.add("Seleccionado")

      // Actualizar precio seg√∫n la variante seleccionada
      const precio = parseFloat(e.target.getAttribute("data-precio")) || 0
      const precioOferta = e.target.getAttribute("data-precio-oferta") || ""
      const stock = parseInt(e.target.getAttribute("data-stock")) || 0

      actualizarPrecioVariante(precio, precioOferta, stock)
      actualizarImagenes()
    }
  })

  // Funcionalidad para miniaturas de galer√≠a
  document.addEventListener("click", (e) => {
    if (e.target.closest(".Miniatura")) {
      const miniatura = e.target.closest(".Miniatura")

      // Actualizar clase activa
      const miniaturaActiva = document.querySelector(".Miniatura.Activo")
      if (miniaturaActiva) miniaturaActiva.classList.remove("Activo")
      miniatura.classList.add("Activo")

      // Actualizar imagen principal
      const imagenPrincipal = document.querySelector(".Imagen_Principal img")
      const rutaImagen = miniatura.querySelector("img").src
      if (imagenPrincipal) imagenPrincipal.src = rutaImagen
    }
  })

  // ‚Äî Compartir ‚Äî
  const botonCompartir = document.querySelector('.Bot√≥n_Compartir');
  if (botonCompartir) {
    botonCompartir.addEventListener('click', function (e) {
      e.preventDefault();
      e.stopPropagation();              // ‚Üê aqu√≠
      const nombre = document.querySelector('.Nombre_Producto').textContent;
      const url = window.location.href;

      const menu = document.createElement('div');
      menu.className = 'Men√∫_Compartir';
      menu.innerHTML = `
      <div class="Opci√≥n_Compartir" data-red="facebook"><i class="fab fa-facebook"></i> Facebook</div>
      <div class="Opci√≥n_Compartir" data-red="tiktok"><i class="fab fa-tiktok"></i> TikTok</div>
      <div class="Opci√≥n_Compartir" data-red="whatsapp"><i class="fab fa-whatsapp"></i> WhatsApp</div>
    `;
      // Evitamos que un clic dentro del men√∫ lo cierre
      menu.addEventListener('click', ev => ev.stopPropagation());

      const rect = botonCompartir.getBoundingClientRect();
      menu.style.position = 'absolute';
      menu.style.top = (rect.bottom + window.scrollY) + 'px';
      menu.style.left = (rect.left + window.scrollX) + 'px';
      document.body.appendChild(menu);

      menu.querySelectorAll('.Opci√≥n_Compartir').forEach(op => {
        op.addEventListener('click', () => {
          let shareUrl = '';
          switch (op.dataset.red) {
            case 'facebook':
              shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
              break;
            case 'tiktok':
              shareUrl = `https://www.tiktok.com/upload?url=${encodeURIComponent(url)}`;
              break;
            case 'whatsapp':
              shareUrl = `https://api.whatsapp.com/send?text=${encodeURIComponent('Mira este producto: ' + nombre + ' ' + url)}`;
              break;
          }
          window.open(shareUrl, '_blank', 'width=600,height=400');
          menu.remove();
          Mostrar_Notificaci√≥n(`Compartiendo en ${op.dataset.red}‚Ä¶`, 'Informaci√≥n');
        });
      });

      // cerrar al hacer clic fuera
      document.addEventListener('click', function cerrar(e) {
        if (!menu.contains(e.target) && e.target !== botonCompartir) {
          menu.remove();
          document.removeEventListener('click', cerrar);
        }
      });
    });
  }

  // Funcionalidad del contador de cantidad
  const botonMenos = document.querySelector(".Contador .Bot√≥n_Contador:first-child")
  const botonMas = document.querySelector(".Contador .Bot√≥n_Contador:last-child")
  const valorContador = document.querySelector(".Valor_Contador")

  if (botonMenos && botonMas && valorContador) {
    let cantidad = 1

    botonMenos.addEventListener("click", () => {
      if (cantidad > 1) {
        cantidad--
        valorContador.textContent = cantidad
      }
    })

    botonMas.addEventListener("click", () => {
      // 1) Obtenemos la variante actual y su stock
      const variante = obtenerVarianteActual()
      const stock = variante?.Stock ?? Infinity

      // 2) Solo incrementamos si no excedemos el stock
      if (cantidad < stock) {
        cantidad++
        valorContador.textContent = cantidad
      } else {
        // Opcional: notificar al usuario que no hay m√°s unidades
        Mostrar_Notificaci√≥n(
          `Solo quedan ${stock} unidades disponibles`,
          'Advertencia'
        )
      }
    })
  }

  // Funcionalidad para pesta√±as de informaci√≥n
  const pesta√±as = document.querySelectorAll(".Navegaci√≥n_Pesta√±as .Pesta√±a")
  const contenidos = document.querySelectorAll(".Pesta√±as_Contenido .Pesta√±a_Contenido")

  pesta√±as.forEach((pesta√±a, indice) => {
    pesta√±a.addEventListener("click", () => {
      const pesta√±aActiva = document.querySelector(".Pesta√±a.Activo")
      const contenidoActivo = document.querySelector(".Pesta√±a_Contenido.Activo")

      if (pesta√±aActiva) pesta√±aActiva.classList.remove("Activo")
      if (contenidoActivo) contenidoActivo.classList.remove("Activo")

      pesta√±a.classList.add("Activo")
      if (contenidos[indice]) contenidos[indice].classList.add("Activo")
    })
  })

  // Inicializa la lista de deseos (trae datos) 
  if (window.Lista_Deseos?.Inicializar) {
    Lista_Deseos.Inicializar();
  }
  // Engancha YA los eventos de clic para abrir/cerrar el panel 
  if (window.Lista_Deseos?.Configurar_Delegaci√≥n_Eventos) {
    Lista_Deseos.Configurar_Delegaci√≥n_Eventos();
  }

  const botonAgregar = document.querySelector('.Bot√≥n_Agregar');
  if (botonAgregar) {
    botonAgregar.addEventListener('click', (e) => {
      e.stopPropagation();
      const cantidad = parseInt(
        document.querySelector('.Valor_Contador').textContent,
        10
      );

      const variante = obtenerVarianteActual();
      const stock = variante?.Stock ?? 0;

      if (cantidad > stock) {
        Mostrar_Notificaci√≥n(`No puedes a√±adir m√°s de ${stock} unidades disponibles.`, 'Error');
        return;
      }

      const nombreVariante = variante?.Nombre_Variante ?? '';
      const nombreCompleto = nombreVariante
        ? `${productoActual.Nombre} ‚Äì ${nombreVariante}`
        : productoActual.Nombre;

      const imagen = document.querySelector('.Imagen_Principal img')?.src || '';
      const textoPrecio = document.querySelector('.Precio_Producto .Precio_Actual').textContent;
      const precio = parseFloat(textoPrecio.replace(/[^0-9.,]/g, '').replace(',', '.')) || 0;

      window.Carrito.Agregar_Elemento(
        nombreCompleto,
        precio,
        imagen,
        cantidad
      );
    }, true);
  }

  // Inicializar la carga de datos del producto
  cargarDatosProducto()
})

document.addEventListener('DOMContentLoaded', () => {
  // 1) Referencias
  const btnWishlist = document.querySelector('.Bot√≥n_Lista_Deseos');
  const panelWishlist = document.querySelector('.Lista_Deseos');
  const btnCerrar = document.querySelector('.Cerrar_Lista_Deseos');

  // 2) Abrir/ocultar panel
  if (btnWishlist && panelWishlist) {
    btnWishlist.addEventListener('click', (e) => {
      e.preventDefault();
      panelWishlist.classList.toggle('Activo');
    });
  }

  // 3) Cerrar panel
  if (btnCerrar && panelWishlist) {
    btnCerrar.addEventListener('click', (e) => {
      e.preventDefault();
      panelWishlist.classList.remove('Activo');
    });
  }
});